{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documenta\u00e7\u00e3o Theo Decourt Link do Docker Hub Link do Video Docker Compose Baixe o docker-compose.yml: docker-compose.yml document.getElementById('downloadLink').addEventListener('click', function(event) { event.preventDefault(); const url = 'https://raw.githubusercontent.com/theodecourt/cloud_projeto1/main/docker-compose.yml'; const fileName = 'docker-compose.yml'; fetch(url) .then(response => response.blob()) .then(blob => { const link = document.createElement('a'); link.href = window.URL.createObjectURL(blob); link.download = fileName; link.click(); }) .catch(error => { console.error('Erro ao baixar o arquivo:', error); alert('Falha ao baixar o arquivo.'); }); }); Funcionamento do Projeto 1. Rodar Container docker compose up 2. Acesse a documenta\u00e7\u00e3o da API em: http://localhost:8000/docs 3. Cadastre um novo usu\u00e1rio { \"nome\": \"string\", \"email\": \"string\", \"senha\": \"string\" } Se der tudo certo o cadastro dever\u00e1 gerar um c\u00f3digo jwt: { \"jwt\": <seu_codigo_jwt> } Copie seu c\u00f3digo jwt. Deixe ele bem guardado pois usaremos mais para frente. 4. Fa\u00e7a login { \"email\": \"string\", \"senha\": \"string\" } Se o login for bem sucedido ele dever\u00e1 gerar um c\u00f3digo jwt: { \"jwt\": <seu_codigo_jwt> } Acesse o Endpoint: GET /consultar Este endpoint permite ao cliente consultar informa\u00e7\u00f5es espec\u00edficas protegidas por autentica\u00e7\u00e3o JWT. Para acessar \u00e9 necess\u00e1rio primeiro autenticar com o JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Sendo o teken sua chave Se o Token for validado dever\u00e1 aparecer uma lista com as convers\u00f5es de moedas assim: { \"USD\": 1, \"AED\": 3.6725, \"AFN\": 66.747, \"ALL\": 91.3568, \"AMD\": 387.4389, \"ANG\": 1.79, \"AOA\": 918.7449, \"ARS\": 985.92, \"AUD\": 1.5065, \"AWG\": 1.79, \"AZN\": 1.7008, \"BAM\": 1.814, \"BBD\": 2, \"BDT\": 119.466, \"BGN\": 1.8142, \"BHD\": 0.376, \"BIF\": 2904.6033, \"BMD\": 1, \"BND\": 1.3224, \"BOB\": 6.9143, \"BRL\": 5.698, ... } 6. Para finalizar, execute o comando abaixo: docker compose down Para buildar a imagem Buildando a imagem em ambas as arquiteturas (x86 e ARM) Rodar os seguintes comandos: # Ativar o buildx docker buildx create --use # Resetar o buildx docker run --rm --privileged multiarch/qemu-user-static --reset -p yes # Construir a imagem em ambas as arquiteturas e enviar para o Docker Hub docker buildx build --platform linux/amd64,linux/arm64 -t theodecourt/projeto11:latest . --push No \u00faltimo comando \u00e9 necessario colocar o seu_usuario/sua_imagem AWS Link para acessar o site hospedado na AWS Passo a passo para dar Deploy Criar cluseter EKS eksctl create cluster --name cloud-project-cluster --region us-east-2 --nodes 2 Configurar o kubectl: aws eks --region us-east-2 update-kubeconfig --name projeto-cloud-cluster Criar arquivos do app e do db app-deployment.yml apiVersion: apps/v1 kind: Deployment metadata: name: fastapi-app spec: replicas: 1 selector: matchLabels: app: fastapi template: metadata: labels: app: fastapi spec: containers: - name: fastapi image: theodecourt/projeto11:latest ports: - containerPort: 8000 env: - name: DATABASE_URL value: \"postgresql://cloud:cloud@postgres:5432/db\" - name: SECRET_KEY_JWT value: \"j&4*F7j3l!2Nf4#skl09@3nl1nj&BHJKNJKDNAn&8#3G@Hsj\" --- apiVersion: v1 kind: Service metadata: name: fastapi-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: fastapi db-deployment.yml apiVersion: apps/v1 kind: Deployment metadata: name: postgres-db-cloud spec: replicas: 1 selector: matchLabels: app: postgres template: metadata: labels: app: postgres spec: containers: - name: postgres image: postgres ports: - containerPort: 5432 env: - name: POSTGRES_USER value: \"cloud\" - name: POSTGRES_PASSWORD value: \"cloud\" - name: POSTGRES_DB value: \"db\" --- apiVersion: v1 kind: Service metadata: name: postgres spec: ports: - port: 5432 selector: app: postgres Inserir os arquivos na AWS pelo CLI Actions -> Upload file -> Adicionar os arquivos do App e do DB Inserir os arquivos nos clusters kubectl apply -f app-deployment.yml kubectl apply -f db-deployment.yml Encontrar o IP da aplica\u00e7\u00e3o kubectl get svc fastapi-service","title":"Documenta\u00e7\u00e3o"},{"location":"#documentacao","text":"","title":"Documenta\u00e7\u00e3o"},{"location":"#theo-decourt","text":"Link do Docker Hub Link do Video","title":"Theo Decourt"},{"location":"#docker-compose","text":"Baixe o docker-compose.yml: docker-compose.yml document.getElementById('downloadLink').addEventListener('click', function(event) { event.preventDefault(); const url = 'https://raw.githubusercontent.com/theodecourt/cloud_projeto1/main/docker-compose.yml'; const fileName = 'docker-compose.yml'; fetch(url) .then(response => response.blob()) .then(blob => { const link = document.createElement('a'); link.href = window.URL.createObjectURL(blob); link.download = fileName; link.click(); }) .catch(error => { console.error('Erro ao baixar o arquivo:', error); alert('Falha ao baixar o arquivo.'); }); });","title":"Docker Compose"},{"location":"#funcionamento-do-projeto","text":"","title":"Funcionamento do Projeto"},{"location":"#1-rodar-container","text":"docker compose up","title":"1. Rodar Container"},{"location":"#2-acesse-a-documentacao-da-api-em","text":"http://localhost:8000/docs","title":"2. Acesse a documenta\u00e7\u00e3o da API em:"},{"location":"#3-cadastre-um-novo-usuario","text":"{ \"nome\": \"string\", \"email\": \"string\", \"senha\": \"string\" } Se der tudo certo o cadastro dever\u00e1 gerar um c\u00f3digo jwt: { \"jwt\": <seu_codigo_jwt> } Copie seu c\u00f3digo jwt. Deixe ele bem guardado pois usaremos mais para frente.","title":"3. Cadastre um novo usu\u00e1rio"},{"location":"#4-faca-login","text":"{ \"email\": \"string\", \"senha\": \"string\" } Se o login for bem sucedido ele dever\u00e1 gerar um c\u00f3digo jwt: { \"jwt\": <seu_codigo_jwt> }","title":"4. Fa\u00e7a login"},{"location":"#acesse-o-endpoint-get-consultar","text":"Este endpoint permite ao cliente consultar informa\u00e7\u00f5es espec\u00edficas protegidas por autentica\u00e7\u00e3o JWT. Para acessar \u00e9 necess\u00e1rio primeiro autenticar com o JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Sendo o teken sua chave Se o Token for validado dever\u00e1 aparecer uma lista com as convers\u00f5es de moedas assim: { \"USD\": 1, \"AED\": 3.6725, \"AFN\": 66.747, \"ALL\": 91.3568, \"AMD\": 387.4389, \"ANG\": 1.79, \"AOA\": 918.7449, \"ARS\": 985.92, \"AUD\": 1.5065, \"AWG\": 1.79, \"AZN\": 1.7008, \"BAM\": 1.814, \"BBD\": 2, \"BDT\": 119.466, \"BGN\": 1.8142, \"BHD\": 0.376, \"BIF\": 2904.6033, \"BMD\": 1, \"BND\": 1.3224, \"BOB\": 6.9143, \"BRL\": 5.698, ... }","title":"Acesse o Endpoint: GET /consultar"},{"location":"#6-para-finalizar-execute-o-comando-abaixo","text":"docker compose down","title":"6. Para finalizar, execute o comando abaixo:"},{"location":"#para-buildar-a-imagem","text":"","title":"Para buildar a imagem"},{"location":"#buildando-a-imagem-em-ambas-as-arquiteturas-x86-e-arm","text":"Rodar os seguintes comandos: # Ativar o buildx docker buildx create --use # Resetar o buildx docker run --rm --privileged multiarch/qemu-user-static --reset -p yes # Construir a imagem em ambas as arquiteturas e enviar para o Docker Hub docker buildx build --platform linux/amd64,linux/arm64 -t theodecourt/projeto11:latest . --push No \u00faltimo comando \u00e9 necessario colocar o seu_usuario/sua_imagem","title":"Buildando a imagem em ambas as arquiteturas (x86 e ARM)"},{"location":"#aws","text":"Link para acessar o site hospedado na AWS","title":"AWS"},{"location":"#passo-a-passo-para-dar-deploy","text":"Criar cluseter EKS eksctl create cluster --name cloud-project-cluster --region us-east-2 --nodes 2 Configurar o kubectl: aws eks --region us-east-2 update-kubeconfig --name projeto-cloud-cluster Criar arquivos do app e do db app-deployment.yml apiVersion: apps/v1 kind: Deployment metadata: name: fastapi-app spec: replicas: 1 selector: matchLabels: app: fastapi template: metadata: labels: app: fastapi spec: containers: - name: fastapi image: theodecourt/projeto11:latest ports: - containerPort: 8000 env: - name: DATABASE_URL value: \"postgresql://cloud:cloud@postgres:5432/db\" - name: SECRET_KEY_JWT value: \"j&4*F7j3l!2Nf4#skl09@3nl1nj&BHJKNJKDNAn&8#3G@Hsj\" --- apiVersion: v1 kind: Service metadata: name: fastapi-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: fastapi db-deployment.yml apiVersion: apps/v1 kind: Deployment metadata: name: postgres-db-cloud spec: replicas: 1 selector: matchLabels: app: postgres template: metadata: labels: app: postgres spec: containers: - name: postgres image: postgres ports: - containerPort: 5432 env: - name: POSTGRES_USER value: \"cloud\" - name: POSTGRES_PASSWORD value: \"cloud\" - name: POSTGRES_DB value: \"db\" --- apiVersion: v1 kind: Service metadata: name: postgres spec: ports: - port: 5432 selector: app: postgres Inserir os arquivos na AWS pelo CLI Actions -> Upload file -> Adicionar os arquivos do App e do DB Inserir os arquivos nos clusters kubectl apply -f app-deployment.yml kubectl apply -f db-deployment.yml Encontrar o IP da aplica\u00e7\u00e3o kubectl get svc fastapi-service","title":"Passo a passo para dar Deploy"}]}